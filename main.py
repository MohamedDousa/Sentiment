# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IBAXVl455oBG3wgV81qANavuyDuMDyvB
"""

# main.py - Integrated application script
import os
import argparse
import subprocess
import time
import webbrowser
import threading
from pathlib import Path
import requests

def check_server_ready(url, retries=10, delay=2):
    """Check if a server is ready by sending requests to the given URL."""
    print(f"Checking if server is ready at {url}...")
    for attempt in range(retries):
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"Server at {url} is ready!")
                return True
        except requests.exceptions.RequestException as e:
            error_type = type(e).__name__
            if attempt < retries - 1:  # Don't print "retrying" on the last attempt
                print(f"Attempt {attempt+1}/{retries} failed ({error_type}). Retrying in {delay} seconds...")
            else:
                print(f"Final attempt {retries}/{retries} failed ({error_type}).")
        time.sleep(delay)
    print(f"Server at {url} is not responding after {retries} attempts.")
    return False

def start_api_server():
    """Start the FastAPI server"""
    print("Starting API server...")
    api_process = subprocess.Popen(["venv/bin/uvicorn", "api:app", "--reload"])  # Use virtual environment executable
    if check_server_ready("http://localhost:8000"):  # Check server readiness
        print("API server running at http://localhost:8000")
    else:
        print("Error: API server failed to start.")

def start_dashboard():
    """Start the Streamlit dashboard"""
    print("Starting Streamlit dashboard...")
    dashboard_process = subprocess.Popen(["venv/bin/streamlit", "run", "dashboard.py"])
    if check_server_ready("http://localhost:8501"):
        print("Dashboard running at http://localhost:8501")
        return True
    else:
        print("Error: Dashboard failed to start.")
        return False

def open_browser():
    """Open web browser to the dashboard"""
    webbrowser.open("http://localhost:8501")

def process_sample_file(file_path, max_retries=5, retry_delay=2):
    """Process a sample file using the API with retries."""
    print(f"Processing sample file: {file_path}")
    if not os.path.exists(file_path):
        print(f"Error: Sample file not found at {file_path}")
        return False

    # Validate file type
    _, ext = os.path.splitext(file_path)
    if ext.lower() not in ['.csv', '.xlsx', '.xls']:
        print(f"Error: Unsupported file type {ext}. Must be .csv, .xlsx, or .xls")
        return False

    # Try to process with retries
    for attempt in range(max_retries):
        try:
            with open(file_path, "rb") as f:
                files = {"file": (os.path.basename(file_path), f)}
                response = requests.post("http://localhost:8000/upload", files=files, timeout=30)

                if response.status_code == 200:
                    print(f"Sample file processed successfully on attempt {attempt+1}")
                    return True
                else:
                    print(f"Attempt {attempt+1}/{max_retries}: Error processing file (HTTP {response.status_code})")
                    print(f"Response: {response.text[:200]}...")  # Print first 200 chars of response
        except requests.exceptions.RequestException as e:
            error_type = type(e).__name__
            print(f"Attempt {attempt+1}/{max_retries}: {error_type} - {str(e)}")

        if attempt < max_retries - 1:
            print(f"Retrying in {retry_delay} seconds...")
            time.sleep(retry_delay)

    print(f"Failed to process sample file after {max_retries} attempts")
    return False

# Modified main function (replace existing main function)
def main():
    """Main function to run the complete application"""
    parser = argparse.ArgumentParser(description="Staff Feedback Analysis Tool")
    parser.add_argument("--sample", type=str, help="Path to sample file for automatic processing")
    parser.add_argument("--api-only", action="store_true", help="Start only the API server, not the dashboard")
    parser.add_argument("--dashboard-only", action="store_true", help="Start only the dashboard, not the API server")
    parser.add_argument("--timeout", type=int, default=60, help="Timeout in seconds for server startup")

    args = parser.parse_args()

    # Create temp directory if it doesn't exist
    os.makedirs("temp", exist_ok=True)

    api_process = None
    dashboard_process = None
    api_ready = False
    dashboard_ready = False

    try:
        # Start API server if needed
        if not args.dashboard_only:
            print("Starting API server...")
            try:
                # Use virtual environment executable
                api_process = subprocess.Popen(["venv/bin/uvicorn", "api:app", "--reload"])
                api_ready = check_server_ready("http://localhost:8000", retries=args.timeout//2, delay=2)
                if api_ready:
                    print("API server running at http://localhost:8000")
                else:
                    print("Error: API server failed to start within timeout period.")
                    if not args.api_only:  # Only exit if we're not in API-only mode
                        return
            except Exception as e:
                print(f"Error starting API server: {str(e)}")
                return

        # Start dashboard if needed
        if not args.api_only:
            print("Starting Streamlit dashboard...")
            try:
                dashboard_process = subprocess.Popen(["venv/bin/streamlit", "run", "dashboard.py"])
                dashboard_ready = check_server_ready("http://localhost:8501", retries=args.timeout//2, delay=2)
                if dashboard_ready:
                    print("Dashboard running at http://localhost:8501")
                    time.sleep(2)  # Small delay to ensure the dashboard is fully loaded
                    webbrowser.open("http://localhost:8501")
                else:
                    print("Error: Dashboard failed to start within timeout period.")
            except Exception as e:
                print(f"Error starting dashboard: {str(e)}")

        # Keep the main thread alive until interrupted
        print("\nServers are running. Press Ctrl+C to shut down...")
        while True:
            time.sleep(1)

    except KeyboardInterrupt:
        print("\nShutting down...")
    except Exception as e:
        print(f"\nUnexpected error: {str(e)}")
    finally:
        # Cleanup processes
        if api_process:
            print("Terminating API server...")
            api_process.terminate()
            try:
                api_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                api_process.kill()

        if dashboard_process:
            print("Terminating dashboard...")
            dashboard_process.terminate()
            try:
                dashboard_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                dashboard_process.kill()

        print("Shutdown complete.")